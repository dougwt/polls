// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PollNew renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PollNew
    auth={Object {}}
    createPoll={[MockFunction]}
    formValues={Object {}}
    history={Object {}}
    resetCreatePoll={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="container"
      >
        <div
          className="row"
        >
          <h3
            className="header section-title"
          >
            Create a Poll
          </h3>
          <ReduxForm
            initialValues={
              Object {
                "choices": Array [
                  0,
                  1,
                ],
              }
            }
            onCancel={[Function]}
            onReset={[MockFunction]}
            onSubmit={[Function]}
          />
        </div>
      </div>,
      "className": "section",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="row"
        >
          <h3
            className="header section-title"
          >
            Create a Poll
          </h3>
          <ReduxForm
            initialValues={
              Object {
                "choices": Array [
                  0,
                  1,
                ],
              }
            }
            onCancel={[Function]}
            onReset={[MockFunction]}
            onSubmit={[Function]}
          />
        </div>,
        "className": "container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h3
              className="header section-title"
            >
              Create a Poll
            </h3>,
            <ReduxForm
              initialValues={
                Object {
                  "choices": Array [
                    0,
                    1,
                  ],
                }
              }
              onCancel={[Function]}
              onReset={[MockFunction]}
              onSubmit={[Function]}
            />,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a Poll",
              "className": "header section-title",
            },
            "ref": null,
            "rendered": "Create a Poll",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "initialValues": Object {
                "choices": Array [
                  0,
                  1,
                ],
              },
              "onCancel": [Function],
              "onReset": [MockFunction],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="container"
        >
          <div
            className="row"
          >
            <h3
              className="header section-title"
            >
              Create a Poll
            </h3>
            <ReduxForm
              initialValues={
                Object {
                  "choices": Array [
                    0,
                    1,
                  ],
                }
              }
              onCancel={[Function]}
              onReset={[MockFunction]}
              onSubmit={[Function]}
            />
          </div>
        </div>,
        "className": "section",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="row"
          >
            <h3
              className="header section-title"
            >
              Create a Poll
            </h3>
            <ReduxForm
              initialValues={
                Object {
                  "choices": Array [
                    0,
                    1,
                  ],
                }
              }
              onCancel={[Function]}
              onReset={[MockFunction]}
              onSubmit={[Function]}
            />
          </div>,
          "className": "container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h3
                className="header section-title"
              >
                Create a Poll
              </h3>,
              <ReduxForm
                initialValues={
                  Object {
                    "choices": Array [
                      0,
                      1,
                    ],
                  }
                }
                onCancel={[Function]}
                onReset={[MockFunction]}
                onSubmit={[Function]}
              />,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Create a Poll",
                "className": "header section-title",
              },
              "ref": null,
              "rendered": "Create a Poll",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "initialValues": Object {
                  "choices": Array [
                    0,
                    1,
                  ],
                },
                "onCancel": [Function],
                "onReset": [MockFunction],
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
