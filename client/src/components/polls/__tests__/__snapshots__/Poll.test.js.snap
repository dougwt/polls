// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Poll renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Poll
    fetchPolls={[MockFunction]}
    fetched={false}
    match={
      Object {
        "params": Object {
          "pollId": 1,
        },
      }
    }
    polls={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Container>
        <Row>
          <h3
            className="header section-title"
          >
            Poll
          </h3>
        </Row>
        Loading...
      </Container>,
      "node": "div",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Row>
            <h3
              className="header section-title"
            >
              Poll
            </h3>
          </Row>,
          "Loading...",
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <h3
              className="header section-title"
            >
              Poll
            </h3>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Poll",
              "className": "header section-title",
            },
            "ref": null,
            "rendered": "Poll",
            "type": "h3",
          },
          "type": [Function],
        },
        "Loading...",
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Container>
          <Row>
            <h3
              className="header section-title"
            >
              Poll
            </h3>
          </Row>
          Loading...
        </Container>,
        "node": "div",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Row>
              <h3
                className="header section-title"
              >
                Poll
              </h3>
            </Row>,
            "Loading...",
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <h3
                className="header section-title"
              >
                Poll
              </h3>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Poll",
                "className": "header section-title",
              },
              "ref": null,
              "rendered": "Poll",
              "type": "h3",
            },
            "type": [Function],
          },
          "Loading...",
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
